pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile'
            args '-v /tmp/openssl:/tmp/openssl'
        }
    }
        /**
     * Checks out the OpenSSL source code from the specified Git tag into the openssl directory.
     * The Git repository URL, tag, and destination directory are configured.
     */
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: 'refs/tags/openssl-3.2.1']],
                          userRemoteConfigs: [[url: 'https://github.com/openssl/openssl']],
                          dir: 'openssl'
                          ])
            }
        }
                /**
         * Build stage to build OpenSSL from source.
         * Configures with prefix, builds with parallel make, runs tests, and installs.
         * Has post failure handler to print error on build failure.
        */
        stage('Build') {
            steps {
                script {
                    sh './Configure --prefix=/tmp/openssl'
                    sh 'make -j$(nproc)'
                    sh 'make test -j$(nproc) || { echo "make test has failed!"; exit 1; }'
                    sh 'make install'
                }
            }
            post {
                failure {
                    script {
                        echo 'Build failed'
                    }
                }
            }
        }
                /**
         * Package stage to build a Debian package for the compiled OpenSSL library.
         * Creates the Debian package metadata, builds the .deb package, and archives it.
        */
        stage('Package') {
            steps {
                sh '''
                    mkdir -p /tmp/openssl/DEBIAN
                    echo "Package: openssl" > /tmp/openssl/DEBIAN/control
                    echo "Version: 3.2.1" >> /tmp/openssl/DEBIAN/control
                    echo "Architecture: amd64" >> /tmp/openssl/DEBIAN/control
                    echo "Maintainer: John Deo <x1234@gmail.com>" >> /tmp/openssl/DEBIAN/control
                    echo "Description: OpenSSL" >> /tmp/openssl/DEBIAN/control
                '''
                sh 'dpkg-deb --build /tmp/openssl /tmp/openssl.deb'
                //archiveArtifacts artifacts: '/tmp/openssl.deb'
            }
        }
                /**
         * Deploy stage to deploy the compiled OpenSSL library to a remote server.
         * Uses SSH with credentials to copy the .deb package to the server.
         * Installs the package on the server using dpkg.
         */
        stage('Deploy') {
            environment {
                SERVER_IP = '172.17.0.4'
                REMOTE_DIR = '/tmp'        // Replace with the destination directory on the server
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'eto1', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sshagent(credentials: ['your-credentials-id']) {
                        sh "scp openssl-compiled/openssl.deb ${USERNAME}@${SERVER_IP}:${REMOTE_DIR}"
                        sh "ssh ${USERNAME}@${SERVER_IP} 'sudo dpkg -i ${REMOTE_DIR}/openssl.deb'"
                    }
                }
            }
        }
    }
}